// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/repository/orders.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/k-orolevsk-y/gophermart/internal/gophermart/models"
)

// MockRepositoryCategoryOrders is a mock of RepositoryCategoryOrders interface.
type MockRepositoryCategoryOrders struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryCategoryOrdersMockRecorder
}

// MockRepositoryCategoryOrdersMockRecorder is the mock recorder for MockRepositoryCategoryOrders.
type MockRepositoryCategoryOrdersMockRecorder struct {
	mock *MockRepositoryCategoryOrders
}

// NewMockRepositoryCategoryOrders creates a new mock instance.
func NewMockRepositoryCategoryOrders(ctrl *gomock.Controller) *MockRepositoryCategoryOrders {
	mock := &MockRepositoryCategoryOrders{ctrl: ctrl}
	mock.recorder = &MockRepositoryCategoryOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryCategoryOrders) EXPECT() *MockRepositoryCategoryOrdersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepositoryCategoryOrders) Create(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryCategoryOrdersMockRecorder) Create(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositoryCategoryOrders)(nil).Create), ctx, order)
}

// Edit mocks base method.
func (m *MockRepositoryCategoryOrders) Edit(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockRepositoryCategoryOrdersMockRecorder) Edit(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockRepositoryCategoryOrders)(nil).Edit), ctx, order)
}

// GetAccrualSumByUserID mocks base method.
func (m *MockRepositoryCategoryOrders) GetAccrualSumByUserID(ctx context.Context, userID uuid.UUID) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccrualSumByUserID", ctx, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccrualSumByUserID indicates an expected call of GetAccrualSumByUserID.
func (mr *MockRepositoryCategoryOrdersMockRecorder) GetAccrualSumByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccrualSumByUserID", reflect.TypeOf((*MockRepositoryCategoryOrders)(nil).GetAccrualSumByUserID), ctx, userID)
}

// GetAllByUserID mocks base method.
func (m *MockRepositoryCategoryOrders) GetAllByUserID(ctx context.Context, userID uuid.UUID) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockRepositoryCategoryOrdersMockRecorder) GetAllByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockRepositoryCategoryOrders)(nil).GetAllByUserID), ctx, userID)
}
