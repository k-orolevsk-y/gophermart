// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/repository/pg.go

// Package mocks is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgconn "github.com/jackc/pgx/v5/pgconn"

	repository "github.com/k-orolevsk-y/gophermart/internal/gophermart/repository"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// Order mocks base method.
func (m *MockRepository) Order() repository.RepositoryCategoryOrders {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order")
	ret0, _ := ret[0].(repository.RepositoryCategoryOrders)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockRepositoryMockRecorder) Order() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockRepository)(nil).Order))
}

// ParsePgError mocks base method.
func (m *MockRepository) ParsePgError(err error) *pgconn.PgError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParsePgError", err)
	ret0, _ := ret[0].(*pgconn.PgError)
	return ret0
}

// ParsePgError indicates an expected call of ParsePgError.
func (mr *MockRepositoryMockRecorder) ParsePgError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParsePgError", reflect.TypeOf((*MockRepository)(nil).ParsePgError), err)
}

// User mocks base method.
func (m *MockRepository) User() repository.RepositoryCategoryUser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(repository.RepositoryCategoryUser)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockRepositoryMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockRepository)(nil).User))
}

// UserWithdraw mocks base method.
func (m *MockRepository) UserWithdraw() repository.RepositoryCategoryUserWithdraw {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserWithdraw")
	ret0, _ := ret[0].(repository.RepositoryCategoryUserWithdraw)
	return ret0
}

// UserWithdraw indicates an expected call of UserWithdraw.
func (mr *MockRepositoryMockRecorder) UserWithdraw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserWithdraw", reflect.TypeOf((*MockRepository)(nil).UserWithdraw))
}
