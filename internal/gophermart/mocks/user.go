// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gophermart/repository/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/k-orolevsk-y/gophermart/internal/gophermart/models"
)

// MockRepositoryCategoryUser is a mock of RepositoryCategoryUser interface.
type MockRepositoryCategoryUser struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryCategoryUserMockRecorder
}

// MockRepositoryCategoryUserMockRecorder is the mock recorder for MockRepositoryCategoryUser.
type MockRepositoryCategoryUserMockRecorder struct {
	mock *MockRepositoryCategoryUser
}

// NewMockRepositoryCategoryUser creates a new mock instance.
func NewMockRepositoryCategoryUser(ctrl *gomock.Controller) *MockRepositoryCategoryUser {
	mock := &MockRepositoryCategoryUser{ctrl: ctrl}
	mock.recorder = &MockRepositoryCategoryUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryCategoryUser) EXPECT() *MockRepositoryCategoryUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepositoryCategoryUser) Create(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryCategoryUserMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositoryCategoryUser)(nil).Create), ctx, user)
}

// GetByID mocks base method.
func (m *MockRepositoryCategoryUser) GetByID(ctx context.Context, id uuid.UUID) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryCategoryUserMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepositoryCategoryUser)(nil).GetByID), ctx, id)
}

// GetByLogin mocks base method.
func (m *MockRepositoryCategoryUser) GetByLogin(ctx context.Context, login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", ctx, login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockRepositoryCategoryUserMockRecorder) GetByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockRepositoryCategoryUser)(nil).GetByLogin), ctx, login)
}
